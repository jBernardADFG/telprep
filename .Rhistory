k <- k + 1
print(k)
}
}
}
for (i in unique(flight_nums)){
best_detects$Day[best_detects$FlightNum == times_conversion_mat[i,1]] <- times_conversion_mat[i,2]
}
flight_nums <- order(unique(best_detects$FlightNum))
subjects <- order(unique(best_detects$Subject))
for (flightsi in flight_nums[2:length(flight_nums)]){
for (subjectsi in subjects){
prev_dets <- best_detects[best_detects$FlightNum < flightsi & best_detects$Subject==subjectsi,]
if (nrow(prev_dets) > 0){
prev_lat <- prev_dets$Latitude[prev_dets$FlightNum == max(prev_dets$FlightNum)]
prev_lon <- prev_dets$Longitude[prev_dets$FlightNum == max(prev_dets$FlightNum)]
}else{
prev_lat <- NA
prev_lon <- NA
}
this_lat <- best_detects$Latitude[best_detects$FlightNum==flightsi & best_detects$Subject==subjectsi]
this_lon <- best_detects$Longitude[best_detects$FlightNum==flightsi & best_detects$Subject==subjectsi]
if (is.na(prev_lat[1]) || is.na(this_lat[1])){
best_detects$Disp[best_detects$FlightNum==flightsi & best_detects$Subject==subjectsi] <- NA
} else{
best_detects$Disp[best_detects$FlightNum==flightsi & best_detects$Subject==subjectsi] <- round(pointDistance(c(prev_lon, prev_lat), c(this_lon, this_lat), lonlat=F)/1000,3)
}
}
}
r_df <- data.frame(best_detects$Channel, best_detects$TagID, best_detects$Subject, best_detects$DateTime, best_detects$Day, best_detects$Latitude, best_detects$Longitude, best_detects$Disp, best_detects$Status)
names(r_df) <- c("Channel", "TagID", "Subject", "DateTime", "Day", "Latitude", "Longitude", "Displacement", "TagStatus")
r_df
org.dat.msm <- function(best_detects){
best_detects <- best_detects[order(best_detects$DateTime),]
flight_nums <- best_detects$FlightNum
med_times <- rep(NA, length(unique(flight_nums)))
for (i in unique(flight_nums)){
med_times[i] <- median(best_detects$DateTime[flight_nums==i])
}
med_times <- floor((med_times-min(med_times))/86400)+1
times_conversion_mat <- cbind(unique(flight_nums), med_times)
best_detects$Subject <- best_detects$Day <-  best_detects$Disp <- NA
channels <- sort(unique(best_detects$Channel))
ids <- sort(unique(best_detects$TagID))
k <- 1
for (channelsi in channels){
for (idsi in ids){
if (sum(best_detects$Channel == channelsi & best_detects$TagID == idsi)>0){
best_detects$Subject[best_detects$Channel == channelsi & best_detects$TagID == idsi] <- k
k <- k + 1
print(k)
}
}
}
for (i in unique(flight_nums)){
best_detects$Day[best_detects$FlightNum == times_conversion_mat[i,1]] <- times_conversion_mat[i,2]
}
flight_nums <- order(unique(best_detects$FlightNum))
subjects <- order(unique(best_detects$Subject))
for (flightsi in flight_nums[2:length(flight_nums)]){
for (subjectsi in subjects){
prev_dets <- best_detects[best_detects$FlightNum < flightsi & best_detects$Subject==subjectsi,]
if (nrow(prev_dets) > 0){
prev_lat <- prev_dets$Latitude[prev_dets$FlightNum == max(prev_dets$FlightNum)]
prev_lon <- prev_dets$Longitude[prev_dets$FlightNum == max(prev_dets$FlightNum)]
}else{
prev_lat <- NA
prev_lon <- NA
}
this_lat <- best_detects$Latitude[best_detects$FlightNum==flightsi & best_detects$Subject==subjectsi]
this_lon <- best_detects$Longitude[best_detects$FlightNum==flightsi & best_detects$Subject==subjectsi]
if (is.na(prev_lat[1]) || is.na(this_lat[1])){
best_detects$Disp[best_detects$FlightNum==flightsi & best_detects$Subject==subjectsi] <- NA
} else{
best_detects$Disp[best_detects$FlightNum==flightsi & best_detects$Subject==subjectsi] <- round(pointDistance(c(prev_lon, prev_lat), c(this_lon, this_lat), lonlat=F)/1000,3)
}
}
}
r_df <- data.frame(best_detects$Channel, best_detects$TagID, best_detects$Subject, best_detects$DateTime, best_detects$Day, best_detects$Latitude, best_detects$Longitude, best_detects$Disp, best_detects$Status)
names(r_df) <- c("Channel", "TagID", "Subject", "DateTime", "Day", "Latitude", "Longitude", "Displacement", "TagStatus")
return(r_df)
}
msm_data_full <- org.dat.msm(best_detects)
msm_data_reduced <- msm_data_full[,c(3,5,8,9)]
dat <- data.frame()
dat <- data.frame(subject=msm_data_reduced$Subject)
dat$time <- msm_data_reduced$Day
dat$obs <- cbind(obs1=msm_data_reduced$Displacement, obs2=round(as.numeric(msm_data_reduced$TagStatus)))
dat
## Fitted model should approximately recover true parameters
msm(obs ~ time, subject=subject, data=dat, qmatrix=two.q,
hmodel = list(hmmBinom(size=40, prob=0.2),
hmmBinom(size=40, prob=0.2)))
dat
msm_data_reduced$Displacement <- msm_data_reduced$Displacement>1
dat <- data.frame()
dat <- data.frame(subject=msm_data_reduced$Subject)
dat$time <- msm_data_reduced$Day
dat$obs <- cbind(obs1=msm_data_reduced$Displacement, obs2=round(as.numeric(msm_data_reduced$TagStatus)))
dat
msm_data_reduced$TagStatus <- round(as.numeric(msm_data_reduced$TagStatus))-1
msm_data_reduced
msm_data_full <- org.dat.msm(best_detects)
msm_data_reduced <- msm_data_full[,c(3,5,8,9)]
msm_data_reduced$Displacement <- msm_data_reduced$Displacement>1
msm_data_reduced$TagStatus <- round(as.numeric(msm_data_reduced$TagStatus))-1
for (i in 1:nrow(msm_data_reduced)){
if (is.na(msm_data_reduced$Displacement[i])){
msm_data_reduced$Displacement[i] <- 1
} else if (msm_data_reduced$Displacement[i]){
msm_data_reduced$Displacement[i] <- 2
} else{
msm_data_reduced$Displacement[i] <- 3
}
}
dat <- data.frame(subject=msm_data_reduced$Subject)
dat$time <- msm_data_reduced$Day
dat$obs <- cbind(obs1=msm_data_reduced$Displacement, obs2=round(as.numeric(msm_data_reduced$TagStatus)))
dat
msm_data_full <- org.dat.msm(best_detects)
msm_data_reduced <- msm_data_full[,c(3,5,8,9)]
msm_data_reduced$Displacement <- msm_data_reduced$Displacement>1
msm_data_reduced$TagStatus <- round(as.numeric(msm_data_reduced$TagStatus))-1
for (i in 1:nrow(msm_data_reduced)){
if (is.na(msm_data_reduced$Displacement[i])){
msm_data_reduced$Displacement[i] <- 1
} else if (msm_data_reduced$Displacement[i]){
msm_data_reduced$Displacement[i] <- 2
} else{
msm_data_reduced$Displacement[i] <- 3
}
}
dat <- data.frame(subject=msm_data_reduced$Subject)
dat$time <- msm_data_reduced$Day
dat
dat$obs <- cbind(obs1=msm_data_reduced$Displacement, obs2=msm_data_reduced$TagStatus)
dat
msm_data_full <- org.dat.msm(best_detects)
msm_data_reduced <- msm_data_full[,c(3,5,8,9)]
msm_data_reduced$Displacement <- msm_data_reduced$Displacement>1
msm_data_reduced$TagStatus <- round(as.numeric(msm_data_reduced$TagStatus))
for (i in 1:nrow(msm_data_reduced)){
if (is.na(msm_data_reduced$Displacement[i])){
msm_data_reduced$Displacement[i] <- 1
} else if (msm_data_reduced$Displacement[i]){
msm_data_reduced$Displacement[i] <- 2
} else{
msm_data_reduced$Displacement[i] <- 3
}
}
dat <- data.frame(subject=msm_data_reduced$Subject)
dat
msm_data_full <- org.dat.msm(best_detects)
msm_data_reduced <- msm_data_full[,c(3,5,8,9)]
msm_data_reduced$Displacement <- msm_data_reduced$Displacement>1
msm_data_reduced$TagStatus <- round(as.numeric(msm_data_reduced$TagStatus))
for (i in 1:nrow(msm_data_reduced)){
if (is.na(msm_data_reduced$Displacement[i])){
msm_data_reduced$Displacement[i] <- 1
} else if (msm_data_reduced$Displacement[i]){
msm_data_reduced$Displacement[i] <- 2
} else{
msm_data_reduced$Displacement[i] <- 3
}
}
dat <- data.frame(subject=msm_data_reduced$Subject)
dat$time <- msm_data_reduced$Day
dat$obs <- cbind(obs1=msm_data_reduced$Displacement, obs2=msm_data_reduced$TagStatus)
dat
two.q
## Fitted model should approximately recover true parameters
msm(obs ~ time, subject=subject, data=dat, qmatrix=two.q,
hmodel = list(hmmBinom(size=3, prob=0.2),
hmmBinom(size=2, prob=0.2)))
for(s in unique(dat$subject)){
if(nrow(dat[dat$subject==s,]==1)){
dat[dat$subject!=s,]
}
}
unique(dat$subject)
for(s in unique(dat$subject)){
if(nrow(dat[dat$subject==s,])==1)){
dat[dat$subject!=s,]
}
}
for(s in unique(dat$subject)){
if(nrow(dat[dat$subject==s,])==1){
dat[dat$subject!=s,]
}
}
dat
nrow(dat)
## Fitted model should approximately recover true parameters
msm(obs ~ time, subject=subject, data=dat, qmatrix=two.q,
hmodel = list(hmmBinom(size=3, prob=0.2),
hmmBinom(size=2, prob=0.2)))
for(s in unique(dat$subject)){
if(nrow(dat[dat$subject==s,])==1){
dat <- dat[dat$subject!=s,]
}
}
dat
nrow(dat)
## Fitted model should approximately recover true parameters
msm(obs ~ time, subject=subject, data=dat, qmatrix=two.q,
hmodel = list(hmmBinom(size=3, prob=0.2),
hmmBinom(size=2, prob=0.2)))
library(msm)
## Simulate data from a Markov model
nsubj <- 30; nobspt <- 5
sim.df <- data.frame(subject = rep(1:nsubj, each=nobspt),
time = seq(0, 20, length=nobspt))
set.seed(1)
two.q <- rbind(c(-0.1, 0.1), c(0, 0))
dat <- simmulti.msm(sim.df[,1:2], qmatrix=two.q, drop.absorb=FALSE)
### EXAMPLE 1
## Generate two observations at each time from the same outcome
## distribution:
## Bin(40, 0.1) for state 1, Bin(40, 0.5) for state 2
dat$obs1[dat$state==1] <- rbinom(sum(dat$state==1), 40, 0.1)
dat$obs2[dat$state==1] <- rbinom(sum(dat$state==1), 40, 0.1)
dat$obs1[dat$state==2] <- rbinom(sum(dat$state==2), 40, 0.5)
dat$obs2[dat$state==2] <- rbinom(sum(dat$state==2), 40, 0.5)
dat$obs <- cbind(obs1 = dat$obs1, obs2 = dat$obs2)
msm_data_full <- org.dat.msm(best_detects)
msm_data_reduced <- msm_data_full[,c(3,5,8,9)]
msm_data_reduced$Displacement <- msm_data_reduced$Displacement>1
msm_data_reduced$TagStatus <- round(as.numeric(msm_data_reduced$TagStatus))
library(msm)
## Simulate data from a Markov model
nsubj <- 30; nobspt <- 5
sim.df <- data.frame(subject = rep(1:nsubj, each=nobspt),
time = seq(0, 20, length=nobspt))
set.seed(1)
two.q <- rbind(c(-0.1, 0.1), c(0, 0))
dat <- simmulti.msm(sim.df[,1:2], qmatrix=two.q, drop.absorb=FALSE)
### EXAMPLE 1
## Generate two observations at each time from the same outcome
## distribution:
## Bin(40, 0.1) for state 1, Bin(40, 0.5) for state 2
dat$obs1[dat$state==1] <- rbinom(sum(dat$state==1), 40, 0.1)
dat$obs2[dat$state==1] <- rbinom(sum(dat$state==1), 40, 0.1)
dat$obs1[dat$state==2] <- rbinom(sum(dat$state==2), 40, 0.5)
dat$obs2[dat$state==2] <- rbinom(sum(dat$state==2), 40, 0.5)
dat$obs <- cbind(obs1 = dat$obs1, obs2 = dat$obs2)
dat
n_fish <- length(unique(dat$subject))
n_fish
n_fish <- unique(dat$subject)
n_fish
msm_data_full <- org.dat.msm(best_detects)
msm_data_reduced <- msm_data_full[,c(3,5,8,9)]
msm_data_reduced$Displacement <- msm_data_reduced$Displacement>1
msm_data_reduced$TagStatus <- round(as.numeric(msm_data_reduced$TagStatus))
for (i in 1:nrow(msm_data_reduced)){
if (is.na(msm_data_reduced$Displacement[i])){
msm_data_reduced$Displacement[i] <- 1
} else if (msm_data_reduced$Displacement[i]){
msm_data_reduced$Displacement[i] <- 2
} else{
msm_data_reduced$Displacement[i] <- 3
}
}
dat <- data.frame(subject=msm_data_reduced$Subject)
dat$time <- msm_data_reduced$Day
dat
dat <- data.frame(subject=msm_data_reduced$Subject)
dat$time <- msm_data_reduced$Day
dat$obs <- cbind(obs1=msm_data_reduced$Displacement, obs2=msm_data_reduced$TagStatus)
dat
unique(dat$subject)
length(unique(dat$subject))
fish <- sort(unique(dat$subject))
fish
detect_periods <- sort(unique(dat$time))
dat$time
install.packages("sfsmisc")
library(sfsmisc)
xy.grid(fish, detect_periods)
msm_data_full <- org.dat.msm(best_detects)
msm_data_reduced <- msm_data_full[,c(3,5,8,9)]
msm_data_reduced$Displacement <- msm_data_reduced$Displacement>1
msm_data_reduced$TagStatus <- round(as.numeric(msm_data_reduced$TagStatus))
msm_data_full <- org.dat.msm(best_detects)
msm_data_full
fish <- sort(unique(msm_data_reduced$Subject))
detect_periods <- sort(unique(msm_data_reduced$Day))
library(sfsmisc)
xy.grid(fish, detect_periods)
names(df) <- c("subject", "time")
str(df)
df <- xy.grid(fish, detect_periods)
df
names(df) <- c("subject", "time")
names(df) <- c("subject", "time")
df
library(sfsmisc)
df <- xy.grid(fish, detect_periods)
df
df <- as.data.frame(xy.grid(fish, detect_periods))
names(df) <- c("subject", "time")
head(df)
df$obs1 <- df$obs2 <- NA
df
library(sfsmisc)
df <- as.data.frame(xy.grid(fish, detect_periods))
names(df) <- c("subject", "time")
df$obs1 <- df$obs2 <- NA
for (i in 1:nrow(msm_data_reduced)){
s <- msm_data_reduced$Subject[i]
d <- msm_data_reduced$Day[i]
df$obs1[df$obs1==s & df$obs2==d] <- msm_data_reduced$Displacement[msm_data_reduced$Subject==s & msm_data_reduced$Day==d]
df$obs2[df$obs1==s & df$obs2==d] <- msm_data_reduced$TagStatus[msm_data_reduced$Subject==s & msm_data_reduced$Day==d]
}
df
msm_data_full <- org.dat.msm(best_detects)
msm_data_reduced <- msm_data_full[,c(3,5,8,9)]
msm_data_reduced$Displacement <- msm_data_reduced$Displacement>1
msm_data_reduced$TagStatus <- round(as.numeric(msm_data_reduced$TagStatus))
for (i in 1:nrow(msm_data_reduced)){
if (is.na(msm_data_reduced$Displacement[i])){
msm_data_reduced$Displacement[i] <- 1
} else if (msm_data_reduced$Displacement[i]){
msm_data_reduced$Displacement[i] <- 2
} else{
msm_data_reduced$Displacement[i] <- 3
}
}
fish <- sort(unique(msm_data_reduced$Subject))
detect_periods <- sort(unique(msm_data_reduced$Day))
library(sfsmisc)
df <- as.data.frame(xy.grid(fish, detect_periods))
names(df) <- c("subject", "time")
df$obs1 <- df$obs2 <- NA
msm_data_full <- org.dat.msm(best_detects)
msm_data_reduced <- msm_data_full[,c(3,5,8,9)]
msm_data_reduced$Displacement <- msm_data_reduced$Displacement>1
msm_data_reduced$TagStatus <- round(as.numeric(msm_data_reduced$TagStatus))
for (i in 1:nrow(msm_data_reduced)){
if (is.na(msm_data_reduced$Displacement[i])){
msm_data_reduced$Displacement[i] <- 1
} else if (msm_data_reduced$Displacement[i]){
msm_data_reduced$Displacement[i] <- 2
} else{
msm_data_reduced$Displacement[i] <- 3
}
}
fish <- sort(unique(msm_data_reduced$Subject))
detect_periods <- sort(unique(msm_data_reduced$Day))
library(sfsmisc)
df <- as.data.frame(xy.grid(fish, detect_periods))
names(df) <- c("subject", "time")
df$obs1 <- df$obs2 <- NA
for (i in 1:nrow(msm_data_reduced)){
s <- msm_data_reduced$Subject[i]
d <- msm_data_reduced$Day[i]
obs1 <- msm_data_reduced$Displacement[msm_data_reduced$Subject==s & msm_data_reduced$Day==d]
obs2 <- msm_data_reduced$TagStatus[msm_data_reduced$Subject==s & msm_data_reduced$Day==d]
print(obs1)
print(obs2)
df$obs1[df$obs1==s & df$obs2==d] <- msm_data_reduced$Displacement[msm_data_reduced$Subject==s & msm_data_reduced$Day==d]
df$obs2[df$obs1==s & df$obs2==d] <- msm_data_reduced$TagStatus[msm_data_reduced$Subject==s & msm_data_reduced$Day==d]
}
df
for (i in 1:nrow(msm_data_reduced)){
s <- msm_data_reduced$Subject[i]
d <- msm_data_reduced$Day[i]
obs1 <- msm_data_reduced$Displacement[msm_data_reduced$Subject==s & msm_data_reduced$Day==d]
obs2 <- msm_data_reduced$TagStatus[msm_data_reduced$Subject==s & msm_data_reduced$Day==d]
df$obs1[df$subject==s & df$time==d] <- obs1
df$obs2[df$subject==s & df$time==d] <- obs2
}
df
msm_data_full <- org.dat.msm(best_detects)
msm_data_reduced <- msm_data_full[,c(3,5,8,9)]
msm_data_reduced$Displacement <- msm_data_reduced$Displacement>1
msm_data_reduced$TagStatus <- round(as.numeric(msm_data_reduced$TagStatus))
for (i in 1:nrow(msm_data_reduced)){
if (is.na(msm_data_reduced$Displacement[i])){
msm_data_reduced$Displacement[i] <- 1
} else if (msm_data_reduced$Displacement[i]){
msm_data_reduced$Displacement[i] <- 2
} else{
msm_data_reduced$Displacement[i] <- 3
}
}
msm_data_full <- org.dat.msm(best_detects)
msm_data_reduced <- msm_data_full[,c(3,5,8,9)]
msm_data_reduced
new_tag_status <- rep(2, nrow(msm_data_reduced))
new_tag_status[msm_data_reduced$TagStatus=="Mort"] <-3
msm_data_reduced$TagStatus <- new_tag_status
fish <- sort(unique(msm_data_reduced$Subject))
detect_periods <- sort(unique(msm_data_reduced$Day))
library(sfsmisc)
df <- as.data.frame(xy.grid(fish, detect_periods))
names(df) <- c("subject", "time")
df$obs1 <- 1
df$obs2 <- 1
for (i in 1:nrow(msm_data_reduced)){
s <- msm_data_reduced$Subject[i]
d <- msm_data_reduced$Day[i]
obs1 <- msm_data_reduced$Displacement[msm_data_reduced$Subject==s & msm_data_reduced$Day==d]
obs2 <- msm_data_reduced$TagStatus[msm_data_reduced$Subject==s & msm_data_reduced$Day==d]
df$obs1[df$subject==s & df$time==d] <- obs1
df$obs2[df$subject==s & df$time==d] <- obs2
}
df
library(sfsmisc)
df <- as.data.frame(xy.grid(fish, detect_periods))
names(df) <- c("subject", "time")
df$obs1 <- 1
df$obs2 <- 1
df
for (i in 1:nrow(msm_data_reduced)){
s <- msm_data_reduced$Subject[i]
d <- msm_data_reduced$Day[i]
obs1 <- msm_data_reduced$Displacement[msm_data_reduced$Subject==s & msm_data_reduced$Day==d]
obs2 <- msm_data_reduced$TagStatus[msm_data_reduced$Subject==s & msm_data_reduced$Day==d]
df$obs1[df$subject==s & df$time==d] <- obs1
df$obs2[df$subject==s & df$time==d] <- obs2
}
df
msm_data_full <- org.dat.msm(best_detects)
msm_data_reduced <- msm_data_full[,c(3,5,8,9)]
msm_data_reduced$Displacement <- msm_data_reduced$Displacement>1
msm_data_reduced$TagStatus <- round(as.numeric(msm_data_reduced$TagStatus))
for (i in 1:nrow(msm_data_reduced)){
if (is.na(msm_data_reduced$Displacement[i])){
msm_data_reduced$Displacement[i] <- 1
} else if (msm_data_reduced$Displacement[i]){
msm_data_reduced$Displacement[i] <- 2
} else{
msm_data_reduced$Displacement[i] <- 3
}
}
new_tag_status <- rep(2, nrow(msm_data_reduced))
new_tag_status[msm_data_reduced$TagStatus=="Mort"] <-3
msm_data_reduced$TagStatus <- new_tag_status
fish <- sort(unique(msm_data_reduced$Subject))
detect_periods <- sort(unique(msm_data_reduced$Day))
library(sfsmisc)
df <- as.data.frame(xy.grid(fish, detect_periods))
names(df) <- c("subject", "time")
df$obs1 <- 1
df$obs2 <- 1
for (i in 1:nrow(msm_data_reduced)){
s <- msm_data_reduced$Subject[i]
d <- msm_data_reduced$Day[i]
if(!is.na(msm_data_reduced$Displacement[msm_data_reduced$Subject==s & msm_data_reduced$Day==d])){
obs1 <- msm_data_reduced$Displacement[msm_data_reduced$Subject==s & msm_data_reduced$Day==d]
}
if(!is.na(msm_data_reduced$TagStatus[msm_data_reduced$Subject==s & msm_data_reduced$Day==d])){
obs2 <- msm_data_reduced$TagStatus[msm_data_reduced$Subject==s & msm_data_reduced$Day==d]
}
df$obs1[df$subject==s & df$time==d] <- obs1
df$obs2[df$subject==s & df$time==d] <- obs2
}
for(s in unique(dat$subject)){
if(nrow(dat[dat$subject==s,])==1){
dat <- dat[dat$subject!=s,]
}
}
msm_data_full <- org.dat.msm(best_detects)
msm_data_reduced <- msm_data_full[,c(3,5,8,9)]
msm_data_reduced$Displacement <- msm_data_reduced$Displacement>1
msm_data_reduced$TagStatus <- round(as.numeric(msm_data_reduced$TagStatus))
for (i in 1:nrow(msm_data_reduced)){
if (is.na(msm_data_reduced$Displacement[i])){
msm_data_reduced$Displacement[i] <- 1
} else if (msm_data_reduced$Displacement[i]){
msm_data_reduced$Displacement[i] <- 2
} else{
msm_data_reduced$Displacement[i] <- 3
}
}
new_tag_status <- rep(2, nrow(msm_data_reduced))
new_tag_status[msm_data_reduced$TagStatus=="Mort"] <-3
msm_data_reduced$TagStatus <- new_tag_status
fish <- sort(unique(msm_data_reduced$Subject))
detect_periods <- sort(unique(msm_data_reduced$Day))
library(sfsmisc)
df <- as.data.frame(xy.grid(fish, detect_periods))
names(df) <- c("subject", "time")
df$obs1 <- 1
df$obs2 <- 1
for (i in 1:nrow(msm_data_reduced)){
s <- msm_data_reduced$Subject[i]
d <- msm_data_reduced$Day[i]
if(!is.na(msm_data_reduced$Displacement[msm_data_reduced$Subject==s & msm_data_reduced$Day==d])){
obs1 <- msm_data_reduced$Displacement[msm_data_reduced$Subject==s & msm_data_reduced$Day==d]
}
if(!is.na(msm_data_reduced$TagStatus[msm_data_reduced$Subject==s & msm_data_reduced$Day==d])){
obs2 <- msm_data_reduced$TagStatus[msm_data_reduced$Subject==s & msm_data_reduced$Day==d]
}
df$obs1[df$subject==s & df$time==d] <- obs1
df$obs2[df$subject==s & df$time==d] <- obs2
}
df
df$obs <- cbind(obs1 = df$obs1, obs2 = df$obs2)
df
dat <- df
## Fitted model should approximately recover true parameters
msm(obs ~ time, subject=subject, data=dat, qmatrix=two.q,
hmodel = list(hmmBinom(size=3, prob=0.2),
hmmBinom(size=2, prob=0.2)))
viterbi.msm(x)
## Fitted model should approximately recover true parameters
x <- msm(obs ~ time, subject=subject, data=dat, qmatrix=two.q,
hmodel = list(hmmBinom(size=3, prob=0.2),
hmmBinom(size=2, prob=0.2)))
viterbi.msm(x)
