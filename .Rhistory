time <- msm_data$time
subject <- msm_data$subject
fit_mod <- msm(obs ~ time,
subject=subject,
initprobs = c(0.999,0.001),
qmatrix = rbind(c(0.999,0.001),c(0,1)),
hmodel = list(hmmMV(hmmCat(prob=c(0.7,0.05,0.25)),
hmmCat(prob=c(0.7,0.25,0))),
hmmMV(hmmCat(prob=c(0.7,0.05,0.25)),
hmmCat(prob=c(0.7,0.25,0.05)))),
method="BFGS", control=list(maxit=5000))
}
fit_mod <- bwv(msm_data)
results <- extract.results(fit_mod)
fit_mod
bwv <- function(msm_data){
obs <- msm_data$obs
time <- msm_data$time
subject <- msm_data$subject
fit_mod <- msm(obs ~ time,
subject=subject,
initprobs = c(0.999,0.001),
qmatrix = rbind(c(0.999,0.001),c(0,1)),
hmodel = list(hmmMV(hmmCat(prob=c(0.7,0.05,0.25)),
hmmCat(prob=c(0.7,0.25,0.05))),
hmmMV(hmmCat(prob=c(0.7,0.05,0.25)),
hmmCat(prob=c(0.7,0.25,0)))),
method="BFGS", control=list(maxit=5000))
}
fit_mod <- bwv(msm_data)
bwv <- function(msm_data){
obs <- msm_data$obs
time <- msm_data$time
subject <- msm_data$subject
fit_mod <- msm(obs ~ time,
subject=subject,
initprobs = c(0.999,0.001),
qmatrix = rbind(c(0.999,0.001),c(0,1)),
hmodel = list(hmmMV(hmmCat(prob=c(0.7,0.05,0.25)),
hmmCat(prob=c(0.7,0.25,0.05))),
hmmMV(hmmCat(prob=c(0.7,0.05,0.25)),
hmmCat(prob=c(0.7,0.25,0.05)))),
method="BFGS", control=list(maxit=5000))
}
msm_data
msm_data[2000:2500]
msm_data[2000:2500,]
bwv <- function(msm_data){
obs <- msm_data$obs
time <- msm_data$time
subject <- msm_data$subject
fit_mod <- msm(obs ~ time,
subject=subject,
initprobs = c(0.999,0.001),
qmatrix = rbind(c(0.999,0.001),c(0,1)),
hmodel = list(hmmMV(hmmCat(prob=c(0.7,0.05,0.25)),
hmmCat(prob=c(0.7,0.25,0.05))),
hmmMV(hmmCat(prob=c(0.7,0.05,0.25)),
hmmCat(prob=c(0.7,0.25,0.05)))),
method="BFGS", control=list(maxit=5000))
}
msm_data <- org.dat.msm(best_detects, t_star = 0.3)
fit_mod <- bwv(msm_data)
results <- extract.results(fit_mod)
v <- viterbi.msm(fit_mod)
v <- as.data.frame(cbind(TagID=msm_data$TagID, Channel=msm_data$Channel, Subject=msm_data$subject, FlightNum=msm_data$FlightNum, Fitted=v$fitted))
# Map the viterbi path back to best_detects
best_detects$Viterbi <- NA
for (i in 1:nrow(best_detects)){
best_detects$Viterbi[i] <- v$Fitted[v$TagID==best_detects$TagID[i] & v$Channel==best_detects$Channel[i] & v$FlightNum==best_detects$FlightNum[i]]
}
best_detects
v <- as.data.frame(cbind(TagID=msm_data$TagID, Channel=msm_data$Channel, Subject=msm_data$subject, FlightNum=msm_data$FlightNum, msm_data$TagStatus, msm_data$Displacement, Fitted=v$fitted))
v
# Map the viterbi path back to best_detects
best_detects$Viterbi <- best_detects$TagStatus <- best_detects$Disp <- NA
for (i in 1:nrow(best_detects)){
best_detects$Viterbi[i] <- v$Fitted[v$TagID==best_detects$TagID[i] & v$Channel==best_detects$Channel[i] & v$FlightNum==best_detects$FlightNum[i]]
best_detects$TagStatus[i] <- v$TagStatus[v$TagID==best_detects$TagID[i] & v$Channel==best_detects$Channel[i] & v$FlightNum==best_detects$FlightNum[i]]
best_detects$Disp[i] <- v$Displacement[v$TagID==best_detects$TagID[i] & v$Channel==best_detects$Channel[i] & v$FlightNum==best_detects$FlightNum[i]]
}
msm_data <- org.dat.msm(best_detects, t_star = 0.3)
fit_mod <- bwv(msm_data)
results <- extract.results(fit_mod)
v <- viterbi.msm(fit_mod)
v <- as.data.frame(cbind(TagID=msm_data$TagID, Channel=msm_data$Channel, Subject=msm_data$subject, FlightNum=msm_data$FlightNum, msm_data$TagStatus, msm_data$Displacement, Fitted=v$fitted))
# Map the viterbi path back to best_detects
best_detects$Viterbi <- best_detects$TagStatus <- best_detects$Disp <- NA
for (i in 1:nrow(best_detects)){
best_detects$Viterbi[i] <- v$Fitted[v$TagID==best_detects$TagID[i] & v$Channel==best_detects$Channel[i] & v$FlightNum==best_detects$FlightNum[i]]
best_detects$TagStatus[i] <- v$TagStatus[v$TagID==best_detects$TagID[i] & v$Channel==best_detects$Channel[i] & v$FlightNum==best_detects$FlightNum[i]]
best_detects$Disp[i] <- v$Displacement[v$TagID==best_detects$TagID[i] & v$Channel==best_detects$Channel[i] & v$FlightNum==best_detects$FlightNum[i]]
}
v <- as.data.frame(cbind(TagID=msm_data$TagID, Channel=msm_data$Channel, Subject=msm_data$subject, FlightNum=msm_data$FlightNum, msm_data$TagStatus, msm_data$Displacement, Fitted=v$fitted))
v
v <- as.data.frame(cbind(TagID=msm_data$TagID, Channel=msm_data$Channel, Subject=msm_data$subject, FlightNum=msm_data$FlightNum, TagStatus=msm_data$TagStatus, Displacement=msm_data$Displacement, Fitted=v$fitted))
# Map the viterbi path back to best_detects
best_detects$Viterbi <- best_detects$TagStatus <- best_detects$Disp <- NA
for (i in 1:nrow(best_detects)){
best_detects$Viterbi[i] <- v$Fitted[v$TagID==best_detects$TagID[i] & v$Channel==best_detects$Channel[i] & v$FlightNum==best_detects$FlightNum[i]]
best_detects$TagStatus[i] <- v$TagStatus[v$TagID==best_detects$TagID[i] & v$Channel==best_detects$Channel[i] & v$FlightNum==best_detects$FlightNum[i]]
best_detects$Disp[i] <- v$Displacement[v$TagID==best_detects$TagID[i] & v$Channel==best_detects$Channel[i] & v$FlightNum==best_detects$FlightNum[i]]
}
v <- as.data.frame(cbind(TagID=msm_data$TagID, Channel=msm_data$Channel, Subject=msm_data$subject, FlightNum=msm_data$FlightNum, TagStatus=msm_data$TagStatus, Displacement=msm_data$Displacement, Fitted=v$fitted))
v
v$TagStatus
# Map the viterbi path back to best_detects
best_detects$Viterbi <- best_detects$TagStatus <- best_detects$Disp <- NA
for (i in 1:nrow(best_detects)){
best_detects$Viterbi[i] <- v$Fitted[v$TagID==best_detects$TagID[i] & v$Channel==best_detects$Channel[i] & v$FlightNum==best_detects$FlightNum[i]]
best_detects$TagStatus[i] <- v$TagStatus[v$TagID==best_detects$TagID[i] & v$Channel==best_detects$Channel[i] & v$FlightNum==best_detects$FlightNum[i]]
best_detects$Disp[i] <- v$Displacement[v$TagID==best_detects$TagID[i] & v$Channel==best_detects$Channel[i] & v$FlightNum==best_detects$FlightNum[i]]
}
#' need to document
hmm.survival <- function(best_detects, t_star=0.3, cl=0.95){
msm_data <- org.dat.msm(best_detects, t_star = 0.3)
fit_mod <- bwv(msm_data)
results <- extract.results(fit_mod)
v <- viterbi.msm(fit_mod)
v <- as.data.frame(cbind(TagID=msm_data$TagID, Channel=msm_data$Channel, Subject=msm_data$subject, FlightNum=msm_data$FlightNum, TagStatus=msm_data$TagStatus, Displacement=msm_data$Displacement, Fitted=v$fitted))
# Map the viterbi path back to best_detects
best_detects$Viterbi <- best_detects$TagStatus <- best_detects$Disp <- NA
for (i in 1:nrow(best_detects)){
best_detects$Viterbi[i] <- v$Fitted[v$TagID==best_detects$TagID[i] & v$Channel==best_detects$Channel[i] & v$FlightNum==best_detects$FlightNum[i]]
print(v$TagStatus[v$TagID==best_detects$TagID[i] & v$Channel==best_detects$Channel[i] & v$FlightNum==best_detects$FlightNum[i]])
best_detects$TagStatus[i] <- v$TagStatus[v$TagID==best_detects$TagID[i] & v$Channel==best_detects$Channel[i] & v$FlightNum==best_detects$FlightNum[i]]
best_detects$Disp[i] <- v$Displacement[v$TagID==best_detects$TagID[i] & v$Channel==best_detects$Channel[i] & v$FlightNum==best_detects$FlightNum[i]]
}
return(list(results=results, viterbi=best_detects))
}
# Map the viterbi path back to best_detects
best_detects$Viterbi <- best_detects$TagStatus <- best_detects$Disp <- NA
for (i in 1:nrow(best_detects)){
best_detects$Viterbi[i] <- v$Fitted[v$TagID==best_detects$TagID[i] & v$Channel==best_detects$Channel[i] & v$FlightNum==best_detects$FlightNum[i]]
print(v$TagStatus[v$TagID==best_detects$TagID[i] & v$Channel==best_detects$Channel[i] & v$FlightNum==best_detects$FlightNum[i]])
best_detects$TagStatus[i] <- v$TagStatus[v$TagID==best_detects$TagID[i] & v$Channel==best_detects$Channel[i] & v$FlightNum==best_detects$FlightNum[i]]
best_detects$Disp[i] <- v$Displacement[v$TagID==best_detects$TagID[i] & v$Channel==best_detects$Channel[i] & v$FlightNum==best_detects$FlightNum[i]]
}
# Map the viterbi path back to best_detects
best_detects$Viterbi <- best_detects$TagStatus <- best_detects$Disp <- NA
for (i in 1:nrow(best_detects)){
best_detects$Viterbi[i] <- v$Fitted[v$TagID==best_detects$TagID[i] & v$Channel==best_detects$Channel[i] & v$FlightNum==best_detects$FlightNum[i]]
print(v$TagStatus[v$TagID==best_detects$TagID[i] & v$Channel==best_detects$Channel[i] & v$FlightNum==best_detects$FlightNum[i]])
best_detects$TagStatus[i] <- v$TagStatus[v$TagID==best_detects$TagID[i] & v$Channel==best_detects$Channel[i] & v$FlightNum==best_detects$FlightNum[i]]
best_detects$Disp[i] <- v$Displacement[v$TagID==best_detects$TagID[i] & v$Channel==best_detects$Channel[i] & v$FlightNum==best_detects$FlightNum[i]]
}
#' need to document
hmm.survival <- function(best_detects, t_star=0.3, cl=0.95){
msm_data <- org.dat.msm(best_detects, t_star = 0.1)
fit_mod <- bwv(msm_data)
results <- extract.results(fit_mod)
v <- viterbi.msm(fit_mod)
v <- as.data.frame(cbind(TagID=msm_data$TagID, Channel=msm_data$Channel, Subject=msm_data$subject, FlightNum=msm_data$FlightNum, Fitted=v$fitted))
# Map the viterbi path back to best_detects
best_detects$Viterbi <- NA
for (i in 1:nrow(best_detects)){
best_detects$Viterbi[i] <- v$Fitted[v$TagID==best_detects$TagID[i] & v$Channel==best_detects$Channel[i] & v$FlightNum==best_detects$FlightNum[i]]
}
return(list(results=results, viterbi=best_detects))
}
msm_data <- org.dat.msm(best_detects, t_star = 0.1)
fit_mod <- bwv(msm_data)
msm_data <- org.dat.msm(best_detects, t_star = t_star)
t_star=0.3
msm_data <- org.dat.msm(best_detects, t_star = t_star)
fit_mod <- bwv(msm_data)
results <- extract.results(fit_mod)
v <- viterbi.msm(fit_mod)
v <- as.data.frame(cbind(TagID=msm_data$TagID, Channel=msm_data$Channel, Subject=msm_data$subject, FlightNum=msm_data$FlightNum, Fitted=v$fitted))
# Map the viterbi path back to best_detects
best_detects$Viterbi <- NA
for (i in 1:nrow(best_detects)){
best_detects$Viterbi[i] <- v$Fitted[v$TagID==best_detects$TagID[i] & v$Channel==best_detects$Channel[i] & v$FlightNum==best_detects$FlightNum[i]]
}
return(list(results=results, viterbi=best_detects))
#' need to document
hmm.survival <- function(best_detects, t_star=0.3, cl=0.95){
msm_data <- org.dat.msm(best_detects, t_star = t_star)
fit_mod <- bwv(msm_data)
results <- extract.results(fit_mod)
v <- viterbi.msm(fit_mod)
v <- as.data.frame(cbind(TagID=msm_data$TagID, Channel=msm_data$Channel, Subject=msm_data$subject, FlightNum=msm_data$FlightNum, Fitted=v$fitted))
# Map the viterbi path back to best_detects
best_detects$Viterbi <- NA
for (i in 1:nrow(best_detects)){
best_detects$Viterbi[i] <- v$Fitted[v$TagID==best_detects$TagID[i] & v$Channel==best_detects$Channel[i] & v$FlightNum==best_detects$FlightNum[i]]
}
return(list(results=results, viterbi=best_detects))
}
hmm_survival <- hmm.survival(best_detects, t_star = .1)
hmm_survival <- hmm.survival(best_detects, t_star = .3)
hmm_survival$results
hmm_survival$viterbi
load("D:/Jordy/telprep/telprep/data/spdf.Rdata")
library(rgeos)
plot.locations(spdf, hmm_survival$viterbi, col_by_fish = F, viterbi=T)
plot.locations(spdf, hmm_survival$viterbi, col_by_fish = F, flight_num=1, viterbi=T)
plot.locations(spdf, hmm_survival$viterbi, col_by_fish = F, flight_num=4, viterbi=T)
plot.locations(spdf, hmm_survival$viterbi, col_by_fish = F, flight_num=5, viterbi=T)
plot.locations(spdf, hmm_survival$viterbi, col_by_fish = F, flight_num=6, viterbi=T)
plot.locations(spdf, hmm_survival$viterbi, col_by_fish = F, flight_num=7, viterbi=T)
hmm_survival
help(hmmMV)
## Simulate data from a Markov model
nsubj <- 30; nobspt <- 5
sim.df <- data.frame(subject = rep(1:nsubj, each=nobspt),
time = seq(0, 20, length=nobspt))
set.seed(1)
two.q <- rbind(c(-0.1, 0.1), c(0, 0))
dat <- simmulti.msm(sim.df[,1:2], qmatrix=two.q, drop.absorb=FALSE)
### EXAMPLE 1
## Generate two observations at each time from the same outcome
## distribution:
## Bin(40, 0.1) for state 1, Bin(40, 0.5) for state 2
dat$obs1[dat$state==1] <- rbinom(sum(dat$state==1), 40, 0.1)
dat$obs2[dat$state==1] <- rbinom(sum(dat$state==1), 40, 0.1)
dat$obs1[dat$state==2] <- rbinom(sum(dat$state==2), 40, 0.5)
dat$obs2[dat$state==2] <- rbinom(sum(dat$state==2), 40, 0.5)
dat$obs <- cbind(obs1 = dat$obs1, obs2 = dat$obs2)
dat
dat$obs
## Fitted model should approximately recover true parameters
msm(obs ~ time, subject=subject, data=dat, qmatrix=two.q,
hmodel = list(hmmBinom(size=40, prob=0.2),
hmmBinom(size=40, prob=0.2)))
### EXAMPLE 2
## Generate two observations at each time from different
## outcome distributions:
## Bin(40, 0.1) and Bin(40, 0.2) for state 1,
dat$obs1 <- dat$obs2 <- NA
dat$obs1[dat$state==1] <- rbinom(sum(dat$state==1), 40, 0.1)
dat$obs2[dat$state==1] <- rbinom(sum(dat$state==1), 40, 0.2)
## Bin(40, 0.5) and Bin(40, 0.6) for state 2
dat$obs1[dat$state==2] <- rbinom(sum(dat$state==2), 40, 0.6)
dat$obs2[dat$state==2] <- rbinom(sum(dat$state==2), 40, 0.5)
dat$obs <- cbind(obs1 = dat$obs1, obs2 = dat$obs2)
## Fitted model should approximately recover true parameters
msm(obs ~ time, subject=subject, data=dat, qmatrix=two.q,
hmodel = list(hmmMV(hmmBinom(size=40, prob=0.3),
hmmBinom(size=40, prob=0.3)),
hmmMV(hmmBinom(size=40, prob=0.3),
hmmBinom(size=40, prob=0.3))),
control=list(maxit=10000))
## Fitted model should approximately recover true parameters
msm(obs ~ time, subject=subject, data=dat, qmatrix=two.q,
hmodel = list(hmmMV(hmmBinom(size=40, prob=0.3),
hmmBinom(size=40, prob=0.3)),
hmmMV(hmmBinom(size=40, prob=0.3),
hmmBinom(size=40, prob=0))),
control=list(maxit=10000))
fit_mod
bwv <- function(msm_data){
obs <- msm_data$obs
time <- msm_data$time
subject <- msm_data$subject
fit_mod <- msm(obs ~ time,
subject=subject,
initprobs = c(0.999,0.001),
qmatrix = rbind(c(0.999,0.001),c(0,1)),
hmodel = list(hmmMV(hmmCat(prob=c(0.7,0.05,0.25)),
hmmCat(prob=c(0.7,0.25,0))),
hmmMV(hmmCat(prob=c(0.7,0.05,0.25)),
hmmCat(prob=c(0.7,0.25,0.05)))),
method="BFGS", control=list(maxit=5000))
}
msm_data <- org.dat.msm(best_detects, t_star = t_star)
fit_mod <- bwv(msm_data)
fit_mod
cl=0.95
# Survival and mortality rates
T_mat <- pmatrix.msm(fit_mod, t=365, ci="normal", cl=cl)
surv_est <- rbind(T_mat[1,1], T_mat[1,2])
row.names(surv_est) <- c("annual survival rate", "annual mortality rate")
surv_est
fit_mod
# Survival and mortality rates
T_mat <- pmatrix.msm(fit_mod, t=365, ci="normal", cl=cl)
T_mat
help("pmatrix.msm")
v <- viterbi.msm(fit_mod)
v <- as.data.frame(cbind(TagID=msm_data$TagID, Channel=msm_data$Channel, Subject=msm_data$subject, FlightNum=msm_data$FlightNum, Fitted=v$fitted))
# Map the viterbi path back to best_detects
best_detects$Viterbi <- NA
for (i in 1:nrow(best_detects)){
best_detects$Viterbi[i] <- v$Fitted[v$TagID==best_detects$TagID[i] & v$Channel==best_detects$Channel[i] & v$FlightNum==best_detects$FlightNum[i]]
}
plot.locations(spdf, hmm_survival$viterbi, col_by_fish = F, viterbi=T)
best_detects
plot.locations(spdf, best_detects, col_by_fish = F, viterbi=T)
plot.locations(spdf, best_detects, col_by_fish = F, flight=1,viterbi=T)
plot.locations(spdf, best_detects, col_by_fish = F, flight=2,viterbi=T)
plot.locations(spdf, best_detects, col_by_fish = F, flight=3,viterbi=T)
plot.locations(spdf, best_detects, col_by_fish = F, flight=4,viterbi=T)
plot.locations(spdf, best_detects, col_by_fish = F, flight=5,viterbi=T)
plot.locations(spdf, best_detects, col_by_fish = F, flight=6,viterbi=T)
plot.locations(spdf, best_detects, col_by_fish = F, flight=7,viterbi=T)
plot.locations(spdf, best_detects, col_by_fish = F, flight=8,viterbi=T)
df
View(df)
bwv <- function(msm_data){
obs <- msm_data$obs
time <- msm_data$time
subject <- msm_data$subject
fit_mod <- msm(obs ~ time,
subject=subject,
initprobs = c(0.999,0.001),
qmatrix = rbind(c(0.999,0.001),c(0,1)),
hmodel = list(hmmMV(hmmCat(prob=c(0.7,0.05,0.25)),
hmmCat(prob=c(0.7,0,0.05))),
hmmMV(hmmCat(prob=c(0.7,0.05,0.25)),
hmmCat(prob=c(0.7,0.25,0.05)))),
method="BFGS", control=list(maxit=5000))
}
fit_mod <- bwv(msm_data)
fit_mod
# Survival and mortality rates
T_mat <- pmatrix.msm(fit_mod, t=365, ci="normal", cl=cl)
T_mat
bwv <- function(msm_data){
obs <- msm_data$obs
time <- msm_data$time
subject <- msm_data$subject
fit_mod <- msm(obs ~ time,
subject=subject,
initprobs = c(0.999,0.001),
qmatrix = rbind(c(0.999,0.001),c(0,1)),
hmodel = list(hmmMV(hmmCat(prob=c(0.7,0.05,0.25)),
hmmCat(prob=c(0.7,0.25,0))),
hmmMV(hmmCat(prob=c(0.7,0.05,0.25)),
hmmCat(prob=c(0.7,0.25,0)))),
method="BFGS", control=list(maxit=5000))
}
fit_mod <- bwv(msm_data)
bwv <- function(msm_data){
obs <- msm_data$obs
time <- msm_data$time
subject <- msm_data$subject
fit_mod <- msm(obs ~ time,
subject=subject,
initprobs = c(0.999,0.001),
qmatrix = rbind(c(0.999,0.001),c(0,1)),
hmodel = list(hmmMV(hmmCat(prob=c(0.7,0.05,0.25)),
hmmCat(prob=c(0,1,0))),
hmmMV(hmmCat(prob=c(0.7,0.05,0.25)),
hmmCat(prob=c(0.7,0.25,0.05)))),
method="BFGS", control=list(maxit=5000))
}
fit_mod <- bwv(msm_data)
# Survival and mortality rates
T_mat <- pmatrix.msm(fit_mod, t=365, ci="normal", cl=cl)
TT_mat
T_mat
bwv <- function(msm_data){
obs <- msm_data$obs
time <- msm_data$time
subject <- msm_data$subject
fit_mod <- msm(obs ~ time,
subject=subject,
initprobs = c(0.999,0.001),
qmatrix = rbind(c(0.999,0.001),c(0,1)),
hmodel = list(hmmMV(hmmCat(prob=c(0.7,0.05,0.25)),
hmmCat(prob=c(0.7,0.25,0))),
hmmMV(hmmCat(prob=c(0.7,0.05,0.25)),
hmmCat(prob=c(0.7,0.25,0.05)))),
method="BFGS", control=list(maxit=5000))
}
fit_mod <- bwv(msm_data)
fit_mod
bwv <- function(msm_data){
obs <- msm_data$obs
time <- msm_data$time
subject <- msm_data$subject
fit_mod <- msm(obs ~ time,
subject=subject,
initprobs = c(0.999,0.001),
qmatrix = rbind(c(0.999,0.001),c(0,1)),
hmodel = list(hmmMV(hmmCat(prob=c(0.7,0.05,0.25)), # Alive - move
hmmCat(prob=c(0.7,0.05,0.25))), # Alive - mort-sig
hmmMV(hmmCat(prob=c(0.4,0.4,0)), # Dead - move
hmmCat(prob=c(0.3,0.25,0.05)))), # Dead -mort-sig
method="BFGS", control=list(maxit=5000))
}
fit_mod <- bwv(msm_data)
# Survival and mortality rates
T_mat <- pmatrix.msm(fit_mod, t=365, ci="normal", cl=cl)
T_mat
org.dat.msm <- function(best_detects, t_star=1){
best_detects <- best_detects[order(best_detects$DateTime),]
flight_nums <- best_detects$FlightNum
med_times <- rep(NA, length(unique(flight_nums)))
for (i in unique(flight_nums)){
med_times[i] <- median(best_detects$DateTime[flight_nums==i])
}
med_times <- floor((med_times-min(med_times))/86400)+1
times_conversion_mat <- cbind(unique(flight_nums), med_times)
best_detects$Subject <- best_detects$Day <-  best_detects$Disp <- NA
channels <- sort(unique(best_detects$Channel))
ids <- sort(unique(best_detects$TagID))
k <- 1
for (channelsi in channels){
for (idsi in ids){
if (sum(best_detects$Channel == channelsi & best_detects$TagID == idsi)>0){
best_detects$Subject[best_detects$Channel == channelsi & best_detects$TagID == idsi] <- k
k <- k + 1
}
}
}
for (i in unique(flight_nums)){
best_detects$Day[best_detects$FlightNum == times_conversion_mat[i,1]] <- times_conversion_mat[i,2]
}
flight_nums <- order(unique(best_detects$FlightNum))
subjects <- order(unique(best_detects$Subject))
for (flightsi in flight_nums[2:length(flight_nums)]){
for (subjectsi in subjects){
prev_dets <- best_detects[best_detects$FlightNum < flightsi & best_detects$Subject==subjectsi,]
if (nrow(prev_dets) > 0){
prev_lat <- prev_dets$Latitude[prev_dets$FlightNum == max(prev_dets$FlightNum)]
prev_lon <- prev_dets$Longitude[prev_dets$FlightNum == max(prev_dets$FlightNum)]
}else{
prev_lat <- NA
prev_lon <- NA
}
this_lat <- best_detects$Latitude[best_detects$FlightNum==flightsi & best_detects$Subject==subjectsi]
this_lon <- best_detects$Longitude[best_detects$FlightNum==flightsi & best_detects$Subject==subjectsi]
if (is.na(prev_lat[1]) || is.na(this_lat[1])){
best_detects$Disp[best_detects$FlightNum==flightsi & best_detects$Subject==subjectsi] <- NA
} else{
best_detects$Disp[best_detects$FlightNum==flightsi & best_detects$Subject==subjectsi] <- round(pointDistance(c(prev_lon, prev_lat), c(this_lon, this_lat), lonlat=F)/1000,3)
}
}
}
r_df <- data.frame(best_detects$Channel, best_detects$TagID, best_detects$Subject, best_detects$DateTime, best_detects$Day, best_detects$Latitude, best_detects$Longitude, best_detects$Disp, best_detects$Status, best_detects$FlightNum)
names(r_df) <- c("Channel", "TagID", "Subject", "DateTime", "Day", "Latitude", "Longitude", "Displacement", "TagStatus", "FlightNum")
r_df$DisInd <- r_df$TagInd <- rep(NA, nrow(r_df))
for(i in 1:nrow(r_df)){
if (is.na(r_df$Displacement[i])){
r_df$DispInd[i] <- 3
}else if (r_df$Displacement[i] <= t_star){
r_df$DispInd[i] <- 2
}else{
r_df$DispInd[i] <- 3
}
if (r_df$TagStatus[i] == "Mort"){
r_df$TagInd[i] <- 2
}else{
r_df$TagInd[i] <- 3
}
}
fish <- sort(unique(r_df$Subject))
detect_periods <- sort(unique(r_df$Day))
df <- as.data.frame(sfsmisc::xy.grid(fish, detect_periods))
names(df) <- c("subject", "time")
df$obs1 <- 1
df$obs2 <- 1
for (i in 1:nrow(r_df)){
s <- r_df$Subject[i]
d <- r_df$Day[i]
obs1 <- r_df$DispInd[r_df$Subject==s & r_df$Day==d]
obs2 <- r_df$TagInd[r_df$Subject==s & r_df$Day==d]
df$obs1[df$subject==s & df$time==d] <- obs1
df$obs2[df$subject==s & df$time==d] <- obs2
}
df$obs <- cbind(obs1 = df$obs1, obs2 = df$obs2)
df$Channel <- df$TagID <- df$DateTime  <- df$Latitude <- df$Longitude <- df$Displacement <- df$TagStatus <- df$FlightNum <- NA
for (i in 1:nrow(df)){
bool <- df$subject[i]==r_df$Subject & df$time[i]==r_df$Day
if (sum(bool)==1){
df$TagStatus[i] <- r_df$TagStatus[bool]
df$Channel[i] <- r_df$Channel[bool]
df$TagID[i] <- r_df$TagID[bool]
df$DateTime[i] <- r_df$DateTime[bool]
df$Latitude[i] <- r_df$Latitude[bool]
df$Longitude[i] <- r_df$Longitude[bool]
df$Displacement[i] <- r_df$Displacement[bool]
df$TagStatus[i] <- r_df$TagStatus[bool]
}
}
for (subject in unique(df$subject)){
df$TagID[df$subject == subject] <- na.omit(df$TagID[df$subject == subject])[1]
df$Channel[df$subject == subject] <- na.omit(df$Channel[df$subject == subject])[1]
df$FlightNum[df$subject == subject] <- rep(1:sum(df$subject==1))
}
return(df)
}
msm_data <- org.dat.msm(best_detects, t_star = 1)
fit_mod <- bwv(msm_data)
# Survival and mortality rates
T_mat <- pmatrix.msm(fit_mod, t=365, ci="normal", cl=cl)
T_mat
v <- viterbi.msm(fit_mod)
v <- as.data.frame(cbind(TagID=msm_data$TagID, Channel=msm_data$Channel, Subject=msm_data$subject, FlightNum=msm_data$FlightNum, Fitted=v$fitted))
# Map the viterbi path back to best_detects
best_detects$Viterbi <- NA
for (i in 1:nrow(best_detects)){
best_detects$Viterbi[i] <- v$Fitted[v$TagID==best_detects$TagID[i] & v$Channel==best_detects$Channel[i] & v$FlightNum==best_detects$FlightNum[i]]
}
plot.locations(spdf, best_detects, col_by_fish = F, flight=8,viterbi=T)
plot.locations(spdf, best_detects, col_by_fish = F, flight=7,viterbi=T)
plot.locations(spdf, best_detects, col_by_fish = F, flight=8,viterbi=T)
fit_mod
145/1283
313/1527
library(telprep)
library(rlist)
install.packages("sfsmisc")
library(sfsmisc)
??pointDistance
library(raster)
install.packages("raster")
install.packages("raster")
library(raster)
PointDistance
