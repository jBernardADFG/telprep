library(devtools)
library(roxygen2)
getwd()
create("telprep")
use_package()
library(telprep)
help("prep.flight.df")
rm(list=objects())
install.packages("devtools", dependencies=T)
install.packages("devtools", dependencies = T)
devtools::install_github("jBernardADFG/telprep")
library(telprep)
library(telprep)
library(telprep)
help("read.flight.data")
help(package="telprep")
help("telprep")
help(package="telprep")
# Step 1: Read raw data into R
folder_path <- "D:/Jordy/telprep/telprep2/data/"
raw_data <- read.flight.data(folder_path) # See help(read.flight.folder)
names(raw_data)
head(raw_data$`tburb_f1_1-26-19-BELLY.TXT`)
# Step 2: If channels or dates were misprogrammed, make corrections
# To merge channels
head(raw_data[[1]])
raw_data[[1]] <- merge.channels(raw_data[[1]], 63, 3) # see help(merge_channels)
# Step 2: If channels or dates were misprogrammed, make corrections
# To merge channels
head(raw_data[[1]])
raw_data[[1]] <- merge.channels(raw_data[[1]], 63, 3) # see help(merge_channels)
merge.channels <- function(data, replace, with){
data$Channel[data$Channel==replace] <- with
return(raw_data)
}
raw_data[[1]] <- merge.channels(raw_data[[1]], 63, 3) # see help(merge_channels)
rm(list=objects())
library(telprep)
library(telprep)
telprep
library(telprep)
library(telprep)
library(telprep)
library(telprep)
library(telprep)
telprep::merge.channels()
library(telprep)
library(telprep)
library(telprep)
library(telprep)
telprep
devtools::use_vignette("flight-vignette")
devtools::build_vignettes()
help(build_vignettes)
devtools::build_vignettes("flight-vignette")
getwd()
devtools::build_vignettes()
library(devtools)
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes(package="telprep")
help("build_vignettes")
library(knitr)
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
library(roxygen2)
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
library(devtools)
vignette(package="telprep")
tools::buildVignette()
tools::buildVignette(flight-vignette)
tools::buildVignette(flight-vignette.Rmd)
help(tools::buildVignette)
help(buildVignette)
build_vignettes()
vignette(package="telprep")
build_vignettes()
build_vignettes()
vignette(package="telprep")
devtools::install()
vignette(package="telprep")
devtools::install(telprep)
devtools::install_github(build_vignettes = TRUE)
devtools::install_github("jbernardADFG/telprep",build_vignettes = TRUE)
vignette(package="telprep")
vignette(package="telprep")
vignette(package="flight-vignette")
vignette("flight-vignette")
vignette(cars)
vignette()
vignette("bootstrapping")
knitr::opts_chunk$set(echo = TRUE)
folder_path <- "D:/Jordy/telprep/telprep2/data/"
raw_data <- read.flight.data(folder_path) # See help(read.flight.folder)
knitr::opts_chunk$set(echo = TRUE)
library(telprep)
folder_path <- "D:/Jordy/telprep/telprep2/data/"
raw_data <- read.flight.data(folder_path) # See help(read.flight.folder)
names(raw_data)
head(raw_data[[1]])
head(names(raw_data))
head(raw_data[[1]])
head(names(raw_data))
head(raw_data[[2]])
head(raw_data[[2]])
raw_data[[2]] <- merge.channels(raw_data[[2]], 10, 3) # see help(merge_channels)
head(raw_data[[2]])
raw_data[[2]] <- channels.merge(raw_data[[2]], 10, 3) # see help(merge_channels)
head(raw_data[[2]])
head(raw_data[[2]])
head(raw_data[[2]])
raw_data[[2]]
folder_path <- "D:/Jordy/telprep/telprep2/data/"
raw_data <- read.flight.data(folder_path, remove_999 = T, mort_sig = T)
str(raw_data)
raw_data[[2]]
head(raw_data[[2]])
folder_path <- "D:/Jordy/telprep/telprep2/data/"
raw_data <- read.flight.data(folder_path, remove_999 = T, mort_sig = T)
head(names(raw_data))
head(raw_data[[2]])
raw_data[[2]] <- channels.merge(raw_data[[2]], 10, 3) # see help(merge_channels)
head(raw_data[[2]])
head(raw_data[[2]])
# # Program workflow:
# # Step 1: Read the raw data into R
# # Step 2: If channels or dates were misprogrammed, make corrections
# # Step 3: Combine the data the contents of the folder files
# # Step 4: Determine the highest powered detection and remove false detections
# # Step 5: Figure out which fish are alive/dead
# # Step 6: Simplify output to interface with riverdist
# # Step 7: Add the results to an existing database or new file.
#
# # Step 1: Read raw data into R
folder_path <- "D:/Jordy/telprep/telprep2/data/"
raw_data <- read.flight.data(folder_path) # See help(read.flight.folder)
names(raw_data)
head(raw_data$`tburb_f1_1-26-19-BELLY.TXT`)
#
# # Step 2: If channels or dates were misprogrammed, make corrections
# # To merge channels
head(raw_data[[1]])
raw_data[[1]] <- channels.merge(raw_data[[1]], 63, 3) # see help(merge_channels)
head(raw_data[[1]])
# # Program workflow:
# # Step 1: Read the raw data into R
# # Step 2: If channels or dates were misprogrammed, make corrections
# # Step 3: Combine the data the contents of the folder files
# # Step 4: Determine the highest powered detection and remove false detections
# # Step 5: Figure out which fish are alive/dead
# # Step 6: Simplify output to interface with riverdist
# # Step 7: Add the results to an existing database or new file.
#
# # Step 1: Read raw data into R
folder_path <- "D:/Jordy/telprep/telprep2/data/"
raw_data <- read.flight.data(folder_path) # See help(read.flight.folder)
names(raw_data)
head(raw_data$`tburb_f1_1-26-19-BELLY.TXT`)
#
# # Step 2: If channels or dates were misprogrammed, make corrections
# # To merge channels
head(raw_data[[1]])
raw_data[[1]] <- channels.merge(raw_data[[1]], 63, 3) # see help(merge_channels)
head(raw_data[[1]])
knitr::opts_chunk$set(echo = TRUE)
library(telprep)
folder_path <- "D:/Jordy/telprep/telprep2/data/"
raw_data <- read.flight.data(folder_path, remove_999 = T, mort_sig = T)
head(names(raw_data))
head(raw_data[[2]])
raw_data[[2]] <- channels.merge(raw_data[[2]], 10, 3) # see help(merge_channels)
head(raw_data[[2]])
head(raw_data[[16]]) # 2003 ?
raw_data[[16]] <- replace.date(raw_data[[16]], new_date ="04/25/19") # see help(replace.date)?
head(raw_data[[16]])
best_locations <- get.best.locations(all_data) # See help(process_data)
names(raw_data) # to determine source_vec
source_vec <- c(rep(c("belly","wing"), 10), rep(c("wing","belly"),2), c("belly","wing"))
all_data <- combine.data(raw_data, source_vec) # See help(combine.data)
best_locations <- get.best.locations(all_data) # See help(process_data)
help(get.best.locations)
knitr::opts_chunk$set(echo = TRUE)
library(telprep)
best_locations <- get.best.locations(all_data) # See help(process_data)
knitr::opts_chunk$set(echo = TRUE)
library(telprep)
library(rlist)
folder_path <- "D:/Jordy/telprep/telprep2/data/"
raw_data <- read.flight.data(folder_path, remove_999 = T, mort_sig = T)
head(names(raw_data))
head(raw_data[[2]])
raw_data[[2]] <- channels.merge(raw_data[[2]], 10, 3) # see help(merge_channels)
head(raw_data[[2]])
head(raw_data[[16]]) # 2003 ?
raw_data[[16]] <- replace.date(raw_data[[16]], new_date ="04/25/19") # see help(replace.date)?
head(raw_data[[16]])
head(names(raw_data)) # to determine source_vec
source_vec <- c(rep(c("belly","wing"), 10), rep(c("wing","belly"),2), c("belly","wing"))
all_data <- combine.data(raw_data, source_vec) # See help(combine.data)
best_locations <- get.best.locations(all_data) # See help(process_data)
head(best_locations$all_detects)
help("get.best.locations")
best_locations <- get.best.locations(all_data, bin_by = 1, n_thresh = 5, dist_max = 10, remove_flagged = F) # See help(process_data)
head(best_locations$all_detects)
head(best_locations$best_detects)
all_detects
best_locations <- get.best.locations(all_data, bin_by = 1, n_thresh = 5, dist_max = 10, remove_flagged = F) # See help(process_data)
all_detects <- best_locations$all_detects
best_detects <- best_locations$best_detects
head(all_detects)
head(best_detects)
head(all_detects)
head(all_detects)
head(best_detects)
head(best_detects)
head(best_detects)
help("flag.dead.fish")
help("add.to.database")
head(flagged_fish)
best_detects <- best_locations$best_detects[!best_locations$best_detects$flag,] # To remove the flagged fish
flagged_fish <- flag.dead.fish(best_detects, dist_thresh = 5) # To flag for mortality
flagged_fish <- flag.dead.fish(best_detects, dist_thresh = 5) # To flag for mortality
head(flagged_fish)
vignette(package=telprep)
vignette(package="telprep")
vignette()
vignette(flight-vignette)
vignette("flight-vignette")
help("write.csv")
help("get.best.locations")
help("channels.merge")
rm(list=objects())
library(devtools)
install_github("jBernardADFG/telprep", build_vignettes = TRUE)
library(telprep)
vignette(package="telprep")
vignette("flight-vignette")
rm(list=objects())
detach(telprep)
detach("telprep")
detach("package:telprep", unload = TRUE)
install_github("jBernardADFG/telprep", build_vignettes = TRUE)
install_github("jBernardADFG/telprep", build_vignettes = TRUE, force=T)
install.packages("usethis")
usethis::use_data_raw(name = 'mydataset')
file.create("R/data.R")
help(use_data)
get.wd()
getwd()
knitr::opts_chunk$set(echo = TRUE)
library(telprep)
library(rlist)
wd <- getwd()
wd <- getwd()
wd <- getwd()
folder_path <- paste(wd, "/data", sep="") # Use your folder path here
folder_path
wd <- getwd()
wd
wd <- getwd()
wd
wd()
getwd()
getwd()
wd <- getwd()
wd()
wd
getwd
getwd()
wd <- getwd()
wd()
wd <- getwd()
wd()
wd
nchar(wd)
wd <- getwd()
wd <- substr(wd, 1, nchar(wd)-9)
wd
wd <- paste(wd, data, sep="")
wd <- getwd()
wd <- substr(wd, 1, nchar(wd)-9)
wd <- paste(wd, "data", sep="")
wd
wd <- getwd()
wd <- substr(wd, 1, nchar(wd)-9)
wd <- paste(wd, "data", sep="")
folder_path <- paste(wd, "/data", sep="") # Use your folder path here
raw_data <- read.flight.data(wd, remove_999 = T, mort_sig = T)
wd
wd <- getwd()
wd <- substr(wd, 1, nchar(wd)-9)
wd <- paste(wd, "data", sep="")
folder_path <- paste(wd, "/data/", sep="") # Use your folder path here
raw_data <- read.flight.data(wd, remove_999 = T, mort_sig = T)
tburb_f1_1.26.19.BELLY <- read.table("D:/Jordy/telprep/telprep/data/tburb_f1_1-26-19-BELLY.TXT", quote="\"")
View(tburb_f1_1.26.19.BELLY)
folder_path <- "D:/Jordy/telprep/telprep/data/" # Use your folder path here
raw_data <- read.flight.data(folder_path, remove_999 = T, mort_sig = T)
folder_path <- "D:/Jordy/telprep/telprep/data/" # Use your folder path here
raw_data <- read.flight.data(folder_path, remove_999 = T, mort_sig = T)
folder_path <- "D:/Jordy/telprep/telprep/data/" # Use your folder path here
raw_data <- read.flight.data(folder_path, remove_999 = T, mort_sig = T)
folder_path <- "D:/Jordy/telprep/telprep/data/" # Use your folder path here
raw_data <- read.flight.data(folder_path, remove_999 = T, mort_sig = T)
getwd()
wd<-getwd()
substr(wd, 1, nchar(wd)-9)
wd<-getwd()
wd<-substr(wd, 1, nchar(wd)-9)
path <- paste(wd, "data/", sep="")
path
raw_data <- read.flight.data(path, remove_999 = T, mort_sig = T)
wd<-getwd()
wd<-substr(wd, 1, nchar(wd)-9)
folder_path <- paste(wd, "data/", sep="") # Use your folder path here
raw_data <- read.flight.data(folder_path, remove_999 = T, mort_sig = T)
raw_data
folder_path <- "D:/Jordy/telprep/telprep2/data/" # Use your folder path here
raw_data <- read.flight.data(folder_path, remove_999 = T, mort_sig = T)
raw_data
load(data)
raw_data <- read.flight.data("data", remove_999 = T, mort_sig = T)
raw_data <- read.flight.data("~data", remove_999 = T, mort_sig = T)
getwd()
raw_data <- read.flight.data("data", remove_999 = T, mort_sig = T)
folder_path <- "D:/Jordy/telprep/telprep2/data/" # Use your folder path here
raw_data <- read.flight.data("data", remove_999 = T, mort_sig = T)
raw_data <- read.flight.data(folder_path, remove_999 = T, mort_sig = T)
save(raw_data, file="raw_data")
load("raw_data")
rm(list=objects())
load("raw_data")
raw_data
load(raw_data)
load("raw_data")
folder_path <- "D:/Jordy/telprep/telprep2/data/" # Use your folder path here
raw_data <- read.flight.data(folder_path, remove_999 = T, mort_sig = T)
save(raw_data, "raw_data.Rdata")
save(raw_data, file="raw_data")
rm(list=objects())
load(raw_data)
load("raw_data")
rm(list=objects())
load("raw_data")
folder_path <- "D:/Jordy/telprep/telprep2/data/" # Use your folder path here
raw_data <- read.flight.data(folder_path, remove_999 = T, mort_sig = T)
save(raw_data, file="raw_data")
rm(list=objects())
install.packages("devtools")
help(build_vignette)
help(build_vignettes)
build_vignettes("telprep")
devtools::build_vignettes("telprep")
devtools::build_vignettes("\vignettes")
devtools::build_vignettes("vignettes")
rm(list=objects())
devtools::install_github("jBernardADFG/telprep")
devtools::build_vignettes("vignettes")
vignette(package="telprep")
install("telprep")
library("telprep")
vignette(package="telprep")
remotes::install_github("jBernardADFG/telprep", build = TRUE, build_opts = c("--no-resave-data", "--no-manual")
)
remotes::install_github("jBernardADFG/telprep", build = TRUE, build_opts = c("--no-resave-data", "--no-manual"), force=T)
vignette(package="telprep")
devtools::build_vignettes("vignettes")
data <- data.frame(
Y=c(1,2,3,4,5),
H_hat_ay=c(100,150,100,175,200),
sd_H_hat_ay=c(50,60,50,60,70),
H_hat_by=c(200,200,250,200,300),
sd_H_hat_by=c(60,70,50,60,80),
MR_hat_y=c(1000,1050,1200,1300,1500),
sd_MR_hat_y=c(200,150,210,160,240),
p_hat_3=c(0.1,0.1,0.2,0.1,0.1),
p_hat_4=c(0.2,0.1,0.2,0.2,0.1),
p_hat_5=c(0.3,0.4,0.4,0.3,0.5),
p_hat_6=c(0.2,0.2,0.1,0.2,0.1),
p_hat_7=c(0.1,0.2,0.1,0.1,0.1)
)
data
library(R2jags)
library(devtools)
install_github(andrewcparnell/jags_examples)
install_github("andrewcparnell/jags_examples")
library(R2jags)
model_code = 'model{
# Likelihood
for (i in 1:N) {
y[i] ~ dnorm(mu_g[Z[i]], sigma^-2)
Z[i] ~ dcat(pi[i, 1:G])
for (g in 1:G) {
exp_theta[i, g] <- exp(theta[i, g])
pi[i, g] <- exp(theta[i, g]) / sum(exp_theta[i, 1:G])
theta[i, g] ~ dnorm(0, 6^-2)
}
}
# Priors
sigma ~ dt(0, 10^-2, 1)T(0,)
for (g in 1:G) {
mu_g_raw[g] ~ dnorm(0, 100^-2)
}
# Make sure these are in order to avoid label switching
mu_g <- sort(mu_g_raw[1:G])
}'
# Set up the data
model_data = list(N = N, y = y, G = G)
G = 3
N = 200
mu_g = c(-5, 0, 2)
sigma = 1
theta = matrix(rnorm(N * G, 0, 3), ncol = G, nrow = N)
pi = exp(theta)/apply(exp(theta), 1, sum)
Z = rep(NA, N)
for(i in 1:N) Z[i] = sample(1:G, size = 1, prob = pi[i,])
y = rnorm(N, mu_g[Z], sigma)
# Set up the data
model_data = list(N = N, y = y, G = G)
# Choose the parameters to watch
model_parameters =  c("mu_g", "sigma", "Z", "pi")
# Run the model
model_run = jags(data = model_data,
parameters.to.save = model_parameters,
model.file=textConnection(model_code))
plot(model_run)
plot(model_run)
print(model_run)
names(data)
model_data <- list()
for(i in 1:ncol(data)){
model_data[[i]] <- data[,i]
}
model_data
names(model_data) <- names(data)
model_data
library(riverdist)
vignette(package="riverdist")
vignette("riverdist_vignette")
library(riverdist)
data(Gulk)
library(riverdist)
data(Gulk)
plot(x=Gulk)
data(Gulk)
Gulk
vignette("riverdist_vignette")
library(telprep)
library(devtools)
library(roxygen2)
build_vignettes()
