color_mat <- matrix(NA, nrow=100, ncol=100)
for(i in 1:100){
for(j in 1:100){
samp <- sample(550:650, 1)
color_mat[i,j] <- colors()[samp]
}
}
cols <- rep(NA, nrow(bd))
for(i in 1:nrow(bd)){
cols[i] <- color_mat[bd$Channel[i], bd$TagID[i]]
}
if(sum(names(detects)=="MortFlag")==0){
lines(raster::crop(sldf,raster::extent(sldf)), col="blue4", lwd=2)
points(bd$X, bd$Y, pch=19, col=cols, cex=1, xlim=bbox(sldf)[1,],ylim=bbox(sldf)[2,])
}else{
plot_sym <- rep(19, nrow(bd))
plot_sym[bd$MortFlag=="Yes"] <- 4
lines(raster::crop(sldf,raster::extent(sldf)), col="blue4", lwd=2)
points(bd$X, bd$Y, pch=plot_sym, col=cols, cex=1, xlim=bbox(sldf)[1,],ylim=bbox(sldf)[2,])
}
}else if (viterbi==T){
plot_sym <- rep(19, nrow(bd))
plot_col_1 <- rep("red", nrow(bd))
plot_col_1[bd$Viterbi==2] <- "green4"
plot_col_2 <- rep("orange", nrow(bd))
plot_col_2[bd$Viterbi==2] <- "green3"
plot_col_3 <- rep("yellow", nrow(bd))
plot_col_3[bd$Viterbi==2] <- "green2"
lines(raster::crop(sldf,raster::extent(sldf)), col="blue4", lwd=2)
points(bd$X, bd$Y, pch=plot_sym, col=plot_col_1, cex=1)
points(bd$X, bd$Y, pch=plot_sym, col=plot_col_2, cex=0.5)
points(bd$X, bd$Y, pch=plot_sym, col=plot_col_3, cex=0.1)
}else{
if(sum(names(detects)=="MortFlag")==0){
lines(raster::crop(sldf,raster::extent(sldf)), col="blue4", lwd=2)
points(bd$X, bd$Y, pch=19, col="red", cex=1)
points(bd$X, bd$Y, pch=19, col="orange", cex=0.5)
points(bd$X, bd$Y, pch=19, col="yellow", cex=0.1)
}else{
plot_sym <- rep(19, nrow(bd))
plot_col_1 <- rep("red", nrow(bd))
plot_col_1[bd$MortFlag=="Yes"] <- "green4"
plot_col_2 <- rep("orange", nrow(bd))
plot_col_2[bd$MortFlag=="Yes"] <- "green3"
plot_col_3 <- rep("yellow", nrow(bd))
plot_col_3[bd$MortFlag=="Yes"] <- "green2"
lines(raster::crop(sldf,raster::extent(sldf)), col="blue4", lwd=2)
points(bd$X, bd$Y, pch=plot_sym, col=plot_col_1, cex=1)
points(bd$X, bd$Y, pch=plot_sym, col=plot_col_2, cex=0.5)
points(bd$X, bd$Y, pch=plot_sym, col=plot_col_3, cex=0.1)
}
}
return(background)
}
par(mfrow=c(1,1))
make_plot(sldf, all_data)
dimnames(sldf)
dimnames(sldf@bbox)
sldf@bbox
knitr::opts_chunk$set(echo = TRUE)
library(telprep)
setwd("D:/Jordy/telprep/telprep/data/sf")
sldf <- rgdal::readOGR("example.shp")
sldf <- sp::spTransform(sldf, attr(all_data, "crs"))
sldf
sldf@bbox
make_plot <- function(sldf, detects, extent=NA, type="bing", darken=1, col_by_fish=F, flight_num=NA, channel=NA, tag_id=NA, viterbi=F){
open_maps=T
if (!requireNamespace("sp", quietly = TRUE)) {
stop("Package \"sp\" is needed for this function to work. Please install it.",
call. = FALSE)
}
if (!requireNamespace("raster", quietly = TRUE)) {
stop("Package \"raster\" is needed. Please install it.",
call. = FALSE)
}
if (is.na(flight_num[1])){
flight_num <- unique(detects$FlightNum)
}
if (is.na(channel[1])){
channel <- unique(detects$Channel)
}
if (is.na(tag_id[1])){
tag_id <- unique(detects$TagID)
}
par(mar=c(1,1,1,1))
if (!is.na(extent)[1]){
sldf@bbox[1,1] <- extent[1]
sldf@bbox[1,2] <- extent[2]
sldf@bbox[2,1] <- extent[3]
sldf@bbox[2,2] <- extent[4]
}
sldf <- crop(sldf, sldf@bbox)
if(isTRUE(open_maps)){
if (!requireNamespace("OpenStreetMap", quietly = TRUE)) {
stop("Package \"OpenStreetMap\" is needed when open_maps=T. Please install it.",
call. = FALSE)
}
if (!requireNamespace("plotwidgets", quietly = TRUE)) {
stop("Package \"plotwidgets\" is needed when open_maps=T. Please install it.",
call. = FALSE)
}
bbox <- sp::spTransform(sldf, sp::CRS("+init=epsg:4326"))@bbox
background <- suppressWarnings(OpenStreetMap::openmap(upperLeft=c(bbox[2,2],bbox[1,1]), lowerRight = c(bbox[2,1],bbox[1,2]),
type=type))
rgb <- background$tiles[[1]]$colorData
hsl <- plotwidgets::col2hsl(rgb)
hsl[3,] <- hsl[3,]/darken
background$tiles[[1]]$colorData <- plotwidgets::hsl2col(hsl)
plot(background, main="",removeMargin=F)
}else{
plot(raster::crop(sldf,raster::extent(sldf)), main="")
rect(sldf@bbox[1,1],sldf@bbox[2,1],sldf@bbox[1,2],sldf@bbox[2,2], col = "black")
}
if (is.null(detects$FlightNum)){
bd <- detects[is.element(detects$Channel, channel) & is.element(detects$TagID, tag_id),]
}else{
bd <- detects[is.element(detects$FlightNum, flight_num) & is.element(detects$Channel, channel) & is.element(detects$TagID, tag_id),]
}
x_vec <- c(sldf@bbox[1,1],sldf@bbox[1,1],sldf@bbox[1,2],sldf@bbox[1,2],sldf@bbox[1,1])
y_vec <- c(sldf@bbox[2,1],sldf@bbox[2,2],sldf@bbox[2,2],sldf@bbox[2,1],sldf@bbox[2,1])
bd <- bd[sp::point.in.polygon(bd$X, bd$Y, x_vec, y_vec)==1,]
c <- data.frame(bd$X, bd$Y)
sp <- sp::SpatialPoints(c, raster::crs(sldf))
new_sp <- sp::spTransform(sp, background[[1]][[1]]$projection)
bd$X <- new_sp@coords[,1]
bd$Y <- new_sp@coords[,2]
sldf <- sp::spTransform(sldf, background[[1]][[1]]$projection)
if (col_by_fish){
set.seed(3)
color_mat <- matrix(NA, nrow=100, ncol=100)
for(i in 1:100){
for(j in 1:100){
samp <- sample(550:650, 1)
color_mat[i,j] <- colors()[samp]
}
}
cols <- rep(NA, nrow(bd))
for(i in 1:nrow(bd)){
cols[i] <- color_mat[bd$Channel[i], bd$TagID[i]]
}
if(sum(names(detects)=="MortFlag")==0){
lines(raster::crop(sldf,raster::extent(sldf)), col="blue4", lwd=2)
points(bd$X, bd$Y, pch=19, col=cols, cex=1, xlim=bbox(sldf)[1,],ylim=bbox(sldf)[2,])
}else{
plot_sym <- rep(19, nrow(bd))
plot_sym[bd$MortFlag=="Yes"] <- 4
lines(raster::crop(sldf,raster::extent(sldf)), col="blue4", lwd=2)
points(bd$X, bd$Y, pch=plot_sym, col=cols, cex=1, xlim=bbox(sldf)[1,],ylim=bbox(sldf)[2,])
}
}else if (viterbi==T){
plot_sym <- rep(19, nrow(bd))
plot_col_1 <- rep("red", nrow(bd))
plot_col_1[bd$Viterbi==2] <- "green4"
plot_col_2 <- rep("orange", nrow(bd))
plot_col_2[bd$Viterbi==2] <- "green3"
plot_col_3 <- rep("yellow", nrow(bd))
plot_col_3[bd$Viterbi==2] <- "green2"
lines(raster::crop(sldf,raster::extent(sldf)), col="blue4", lwd=2)
points(bd$X, bd$Y, pch=plot_sym, col=plot_col_1, cex=1)
points(bd$X, bd$Y, pch=plot_sym, col=plot_col_2, cex=0.5)
points(bd$X, bd$Y, pch=plot_sym, col=plot_col_3, cex=0.1)
}else{
if(sum(names(detects)=="MortFlag")==0){
lines(raster::crop(sldf,raster::extent(sldf)), col="blue4", lwd=2)
points(bd$X, bd$Y, pch=19, col="red", cex=1)
points(bd$X, bd$Y, pch=19, col="orange", cex=0.5)
points(bd$X, bd$Y, pch=19, col="yellow", cex=0.1)
}else{
plot_sym <- rep(19, nrow(bd))
plot_col_1 <- rep("red", nrow(bd))
plot_col_1[bd$MortFlag=="Yes"] <- "green4"
plot_col_2 <- rep("orange", nrow(bd))
plot_col_2[bd$MortFlag=="Yes"] <- "green3"
plot_col_3 <- rep("yellow", nrow(bd))
plot_col_3[bd$MortFlag=="Yes"] <- "green2"
lines(raster::crop(sldf,raster::extent(sldf)), col="blue4", lwd=2)
points(bd$X, bd$Y, pch=plot_sym, col=plot_col_1, cex=1)
points(bd$X, bd$Y, pch=plot_sym, col=plot_col_2, cex=0.5)
points(bd$X, bd$Y, pch=plot_sym, col=plot_col_3, cex=0.1)
}
}
return(background)
}
make_plot(sldf, all_data)
gif_plot <- function(sldf, detects, dir = "D:/Jordy/myplots/", extent=NA, type="bing", darken=2.5, col_by_fish=F, viterbi=F, width = 1024, height=768, fps = fps){
par(mfrow=c(1,1))
n_flights <- length(unique(detects$FlightNum))
files <- rep(NA,n_flights)
for (i in 1:n_flights){
base_map <- make_plot(sldf, detects, flight=i, extent=extent, type=type, darken=darken, col_by_fish=col_by_fish, viterbi=viterbi, return_background=T)
x_min <- base_map$bbox$p1[1]
x_max <- base_map$bbox$p2[1]
y_min <- base_map$bbox$p2[2]
y_max <- base_map$bbox$p1[2]
x_mid <- (x_max+x_min)/2
y_diff <- y_max-y_min
text(x=x_mid, y=y_max-y_diff/8, labels=paste("Flight", i, sep=" "), col="yellow", cex=4)
file <- paste(dir, "plot", i, ".png", sep="")
files[i] <- file
dev.print(png, file = file, width = width, height = height)
dev.off()
}
images <- purrr::map(files, image_read)
images <- image_join(images)
animation <- image_animate(images, fps = 0.5)
image_write(animation, paste(dir, "gif.gif", sep=""))
}
make_plot <- function(sldf, detects, extent=NA, type="bing", darken=1, col_by_fish=F, flight_num=NA, channel=NA, tag_id=NA, viterbi=F, return_background=F){
open_maps=T
if (!requireNamespace("sp", quietly = TRUE)) {
stop("Package \"sp\" is needed for this function to work. Please install it.",
call. = FALSE)
}
if (!requireNamespace("raster", quietly = TRUE)) {
stop("Package \"raster\" is needed. Please install it.",
call. = FALSE)
}
if (is.na(flight_num[1])){
flight_num <- unique(detects$FlightNum)
}
if (is.na(channel[1])){
channel <- unique(detects$Channel)
}
if (is.na(tag_id[1])){
tag_id <- unique(detects$TagID)
}
par(mar=c(1,1,1,1))
if (!is.na(extent)[1]){
sldf@bbox[1,1] <- extent[1]
sldf@bbox[1,2] <- extent[2]
sldf@bbox[2,1] <- extent[3]
sldf@bbox[2,2] <- extent[4]
}
sldf <- crop(sldf, sldf@bbox)
if(isTRUE(open_maps)){
if (!requireNamespace("OpenStreetMap", quietly = TRUE)) {
stop("Package \"OpenStreetMap\" is needed when open_maps=T. Please install it.",
call. = FALSE)
}
if (!requireNamespace("plotwidgets", quietly = TRUE)) {
stop("Package \"plotwidgets\" is needed when open_maps=T. Please install it.",
call. = FALSE)
}
bbox <- sp::spTransform(sldf, sp::CRS("+init=epsg:4326"))@bbox
background <- suppressWarnings(OpenStreetMap::openmap(upperLeft=c(bbox[2,2],bbox[1,1]), lowerRight = c(bbox[2,1],bbox[1,2]),
type=type))
rgb <- background$tiles[[1]]$colorData
hsl <- plotwidgets::col2hsl(rgb)
hsl[3,] <- hsl[3,]/darken
background$tiles[[1]]$colorData <- plotwidgets::hsl2col(hsl)
plot(background, main="",removeMargin=F)
}else{
plot(raster::crop(sldf,raster::extent(sldf)), main="")
rect(sldf@bbox[1,1],sldf@bbox[2,1],sldf@bbox[1,2],sldf@bbox[2,2], col = "black")
}
if (is.null(detects$FlightNum)){
bd <- detects[is.element(detects$Channel, channel) & is.element(detects$TagID, tag_id),]
}else{
bd <- detects[is.element(detects$FlightNum, flight_num) & is.element(detects$Channel, channel) & is.element(detects$TagID, tag_id),]
}
x_vec <- c(sldf@bbox[1,1],sldf@bbox[1,1],sldf@bbox[1,2],sldf@bbox[1,2],sldf@bbox[1,1])
y_vec <- c(sldf@bbox[2,1],sldf@bbox[2,2],sldf@bbox[2,2],sldf@bbox[2,1],sldf@bbox[2,1])
bd <- bd[sp::point.in.polygon(bd$X, bd$Y, x_vec, y_vec)==1,]
c <- data.frame(bd$X, bd$Y)
sp <- sp::SpatialPoints(c, raster::crs(sldf))
new_sp <- sp::spTransform(sp, background[[1]][[1]]$projection)
bd$X <- new_sp@coords[,1]
bd$Y <- new_sp@coords[,2]
sldf <- sp::spTransform(sldf, background[[1]][[1]]$projection)
if (col_by_fish){
set.seed(3)
color_mat <- matrix(NA, nrow=100, ncol=100)
for(i in 1:100){
for(j in 1:100){
samp <- sample(550:650, 1)
color_mat[i,j] <- colors()[samp]
}
}
cols <- rep(NA, nrow(bd))
for(i in 1:nrow(bd)){
cols[i] <- color_mat[bd$Channel[i], bd$TagID[i]]
}
if(sum(names(detects)=="MortFlag")==0){
lines(raster::crop(sldf,raster::extent(sldf)), col="blue4", lwd=2)
points(bd$X, bd$Y, pch=19, col=cols, cex=1, xlim=bbox(sldf)[1,],ylim=bbox(sldf)[2,])
}else{
plot_sym <- rep(19, nrow(bd))
plot_sym[bd$MortFlag=="Yes"] <- 4
lines(raster::crop(sldf,raster::extent(sldf)), col="blue4", lwd=2)
points(bd$X, bd$Y, pch=plot_sym, col=cols, cex=1, xlim=bbox(sldf)[1,],ylim=bbox(sldf)[2,])
}
}else if (viterbi==T){
plot_sym <- rep(19, nrow(bd))
plot_col_1 <- rep("red", nrow(bd))
plot_col_1[bd$Viterbi==2] <- "green4"
plot_col_2 <- rep("orange", nrow(bd))
plot_col_2[bd$Viterbi==2] <- "green3"
plot_col_3 <- rep("yellow", nrow(bd))
plot_col_3[bd$Viterbi==2] <- "green2"
lines(raster::crop(sldf,raster::extent(sldf)), col="blue4", lwd=2)
points(bd$X, bd$Y, pch=plot_sym, col=plot_col_1, cex=1)
points(bd$X, bd$Y, pch=plot_sym, col=plot_col_2, cex=0.5)
points(bd$X, bd$Y, pch=plot_sym, col=plot_col_3, cex=0.1)
}else{
if(sum(names(detects)=="MortFlag")==0){
lines(raster::crop(sldf,raster::extent(sldf)), col="blue4", lwd=2)
points(bd$X, bd$Y, pch=19, col="red", cex=1)
points(bd$X, bd$Y, pch=19, col="orange", cex=0.5)
points(bd$X, bd$Y, pch=19, col="yellow", cex=0.1)
}else{
plot_sym <- rep(19, nrow(bd))
plot_col_1 <- rep("red", nrow(bd))
plot_col_1[bd$MortFlag=="Yes"] <- "green4"
plot_col_2 <- rep("orange", nrow(bd))
plot_col_2[bd$MortFlag=="Yes"] <- "green3"
plot_col_3 <- rep("yellow", nrow(bd))
plot_col_3[bd$MortFlag=="Yes"] <- "green2"
lines(raster::crop(sldf,raster::extent(sldf)), col="blue4", lwd=2)
points(bd$X, bd$Y, pch=plot_sym, col=plot_col_1, cex=1)
points(bd$X, bd$Y, pch=plot_sym, col=plot_col_2, cex=0.5)
points(bd$X, bd$Y, pch=plot_sym, col=plot_col_3, cex=0.1)
}
}
if (return_background==T){
return(background)
}
}
extent <- c(x_min=466060, x_max=1174579, y_min=6835662, y_max=7499016)
gif_plot(sldf, viterbi, dir="S:/Jordy/telprep/telprep/gifs/viterbi/", extent=extent, viterbi=T)
library(telprep)
devtools::install_github("jBernardADFG/telprep", build_vignettes = T)
library(telprep)
raw_data[[18]]
gpBrownianTree1 <- function(m, n, clr, fn, ttl, dflg=0) {
cat(" *** START:", date(),"m=",m,"n=",n,"clr=",clr,"\n");
M = matrix(c(0),ncol=m,nrow=m,byrow=T);
# Seed in center
x = m%/%2; y = m%/%2;
M[x,y]=1;
pf=paste0(fn,".png");
cat(" *** Plot file -",pf,"\n");
# Main loops: Generating matrix M
for (i in 1:n) {
if(i>1) {
x = sample(1:m, 1, replace=F)
y = sample(1:m, 1, replace=F)}
while(1) {
ox=x; oy=y;
x = x + sample(-1:1, 1, replace=F);
y = y + sample(-1:1, 1, replace=F);
if(x<=m && y<=m && x>0 && y>0 && M[x,y])
{if(ox<=m && oy<=m && ox>0 && oy>0){M[ox,oy]=1; break}}
if(!(x<=m && y<=m && x>0 && y>0)) {break}
}
}
plotmat(M, fn, clr, ttl, dflg); ## Plotting matrix M
cat(" *** END:",date(),"\n");
}
gpBrownianTree1(400,15000,"red", "BT13", "Brownian Tree v.1-1",1);   ## Dump (Seed in center alwys now)
plotmat <- function(mat, fn, clr, ttl, dflg=0, psz=600, cx=1.0) {
m = nrow(mat); d = 0; X=NULL; Y=NULL;
pf = paste0(fn, ".png"); df = paste0(fn, ".dmp");
# Building X and Y arrays for plotting from not equal to zero values in mat.
for (i in 1:m) {
for (j in 1:m) {if(mat[i,j]==0){next} else {d=d+1; X[d]=i; Y[d]=j} }
};
cat(" *** Matrix(", m,"x",m,")", d, "DOTS\n");
# Dumping if requested (dflg=1).
if (dflg==1) {dump(c("X","Y"), df); cat(" *** Dump file:", df, "\n")};
# Plotting
if (ttl!="") {
plot(X,Y, main=ttl, axes=FALSE, xlab="", ylab="", col=clr, pch=20, cex=cx)}
else {par(mar=c(0,0,0,0));
plot(X,Y, axes=FALSE, xlab=NULL, ylab=NULL, col=clr, pch=20, cex=cx)};
# Writing png-file
dev.copy(png, filename=pf, width=psz, height=psz);
# Cleaning
dev.off(); graphics.off();
}
## HFR#2 plotv2(): Simple plotting using 2 vectors (dumped into ".dmp" file).
# Where: fn - file name; clr - color; ttl - plot title; psz - picture size;
#        cx - cex or scale.
plotv2 <- function(fn, clr, ttl, psz=600, cx=1.0) {
cat(" *** START:", date(), "clr=", clr, "psz=", psz, "\n");
pf = paste0(fn, ".png"); df = paste0(fn, ".dmp");
source(df); d = length(X);
cat(" *** Plot file -", pf, "Source dump-file:", df, d, "DOTS\n");
# Plotting
if (ttl!="") {
plot(X,Y, main=ttl, axes=FALSE, xlab="", ylab="", col=clr, pch=20, cex=cx)}
else {par(mar=c(0,0,0,0));
plot(X,Y, axes=FALSE, xlab=NULL, ylab=NULL, col=clr, pch=20, cex=cx)};
# Writing png-file
dev.copy(png, filename=pf, width=psz, height=psz);
# Cleaning
dev.off(); graphics.off();
cat(" *** END:", date(), "\n");
}
plotmat <- function(mat, fn, clr, ttl, dflg=0, psz=600, cx=1.0) {
m = nrow(mat); d = 0; X=NULL; Y=NULL;
pf = paste0(fn, ".png"); df = paste0(fn, ".dmp");
# Building X and Y arrays for plotting from not equal to zero values in mat.
for (i in 1:m) {
for (j in 1:m) {if(mat[i,j]==0){next} else {d=d+1; X[d]=i; Y[d]=j} }
};
cat(" *** Matrix(", m,"x",m,")", d, "DOTS\n");
# Dumping if requested (dflg=1).
if (dflg==1) {dump(c("X","Y"), df); cat(" *** Dump file:", df, "\n")};
# Plotting
if (ttl!="") {
plot(X,Y, main=ttl, axes=FALSE, xlab="", ylab="", col=clr, pch=20, cex=cx)}
else {par(mar=c(0,0,0,0));
plot(X,Y, axes=FALSE, xlab=NULL, ylab=NULL, col=clr, pch=20, cex=cx)};
# Writing png-file
dev.copy(png, filename=pf, width=psz, height=psz);
# Cleaning
dev.off(); graphics.off();
}
## HFR#2 plotv2(): Simple plotting using 2 vectors (dumped into ".dmp" file).
# Where: fn - file name; clr - color; ttl - plot title; psz - picture size;
#        cx - cex or scale.
plotv2 <- function(fn, clr, ttl, psz=600, cx=1.0) {
cat(" *** START:", date(), "clr=", clr, "psz=", psz, "\n");
pf = paste0(fn, ".png"); df = paste0(fn, ".dmp");
source(df); d = length(X);
cat(" *** Plot file -", pf, "Source dump-file:", df, d, "DOTS\n");
# Plotting
if (ttl!="") {
plot(X,Y, main=ttl, axes=FALSE, xlab="", ylab="", col=clr, pch=20, cex=cx)}
else {par(mar=c(0,0,0,0));
plot(X,Y, axes=FALSE, xlab=NULL, ylab=NULL, col=clr, pch=20, cex=cx)};
# Writing png-file
dev.copy(png, filename=pf, width=psz, height=psz);
# Cleaning
dev.off(); graphics.off();
cat(" *** END:", date(), "\n");
}
## Kronecker power of a matrix.
## Where: m - initial matrix, n - power.
matkronpow <- function(m, n) {
if (n<2) {return (m)};
r = m; n = n-1;
for(i in 1:n) {r = r%x%m};
return (r);
}
## Generate and plot Kronecker product based fractals.
## gpKronFractal(m, n, pf, clr, ttl, dflg, psz, cx):
## Where: m - initial matrix (filled with 0/int); n - order of the fractal;
## fn - plot file name (without extension); clr - color; ttl - plot title;
## dflg - writing dump file flag (0/1); psz - picture size; cx - cex.
gpKronFractal <- function(m, n, fn, clr, ttl, dflg=0, psz=640, cx=1.0) {
fign="Kpbf";
cat(" *** START:", date(), "n=", n, "clr=", clr, "psz=", psz, "\n");
if(fn=="") {fn=paste0(fign,"o", n)} else {fn=paste0(fn)};
if(ttl!="") {ttl=paste0(ttl,", order ", n)};
cat(" *** Plot file -", fn, "title:", ttl, "\n");
r = matkronpow(m, n);
plotmat(r, fn, clr, ttl, dflg, psz, cx);
cat(" *** END:", date(), "\n");
}
M <- matrix(c(0,1,0, 1,1,1, 0,1,0), ncol=3, nrow=3, byrow=TRUE);
M1 <- matrix(c(1,0,1, 0,1,0, 1,0,1), ncol=3, nrow=3, byrow=TRUE);
R=M%x%M1;
gpKronFractal(R, 2, "Crosses2F", "maroon", "2 crosses based fractal", 1);
devtools::install_github("jBernardADFG/telprep", build_vignettes = T)
devtools::install_github("jBernardADFG/telprep", build_vignettes = T, force=T)
devtools::install_github("jBernardADFG/telprep", build_vignettes = T)
library(telprep)
vignette("msm")
vignette("hmm")
vignette("hmm")
devtools::install_github("jBernardADFG/telprep", build_vignettes = T, force=T)
detach("package:telprep", unload = TRUE)
devtools::install_github("jBernardADFG/telprep", build_vignettes = T, force=T)
library(telprep)
vignette("msm")
vignette("hmm")
help(make_plot)
make_plot(sldf, all_data)
make_plot(sldf, viterbi, type="bing", darken=2.5, viterbi=T, flight=5)
extent <- c(x_min=466060, x_max=1174579, y_min=6835662, y_max=7499016)
temp<-make_plot(sldf, best_detects, extent, darken=2.5)
vignette("msm")
vignette("hmm")
vignette("flight-vignette")
install.packages("usmap")
library(usmap)
library(ggplot2)
plot_usmap(include="AK")
help("plot_usmap")
plot_usmap
library(sp)
library(rgeos)
library(rgdal)
library(sp)
library(rgeos)
library(rgdal)
latlong2state <- function(pointsDF) {
states <-readOGR(dsn='cb_2013_us_state_5m',layer='cb_2013_us_state_5m')
states <- spTransform(states, CRS("+proj=longlat"))
pointsSP <- SpatialPoints(pointsDF,proj4string=CRS("+proj=longlat"))
# Use 'over' to get _indices_ of the Polygons object containing each point
indices <- over(pointsSP, states)
indices$NAME
}
ak <- data.frame(lon = c(-151.0074), lat = c(63.0694))
ak
latlong2state(ak)
vignette("hmm")
vignette("telprep")
vignette("flight-vignette")
